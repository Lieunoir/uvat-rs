searchState.loadedDescShard("faer", 0, "<code>faer</code> is a general-purpose linear algebra library for rust, …\ndetermines whether to replace or add to the result of a …\nadds the result to the output buffer\nallocator could not provide an allocation with the …\nlike <code>Default</code>, but with an extra type parameter so that …\nrRequired allocation does not fit within <code>isize</code> bytes\ndetermines whether the input should be implicitly …\ncontiguous stride equal to <code>-1</code>\ncontiguous stride equal to <code>+1</code>\nwhether the types involved have any safety invariants\ntype that can be used to index into a range\ntype that can be used to index into a range\ntype that can be used to partition a range\ntype that can be used to partition a range\nnative unsigned integer type\nlower triangular half\neither an index or a negative value\neither an index or a negative value\nno implicit conjugation\ndetermines the parallelization configuration\nparallelized using the global rayon threadpool, non …\noverwrites the output buffer\nthe reversed stride type\nscaling factor for multiplying matrices.\nsequential, non portable across different platforms\nmatrix dimension\nbase trait for <code>Shape</code>\ndetermines which side of a self-adjoint matrix should be …\nimplements <code>Default</code> based on <code>Config</code>’s <code>Auto</code> implementation …\nstride distance between two consecutive elements along a …\nmemory allocation error\nsealed trait for types that can be created from “unbound…\nupper triangular half\nimplicit conjugation\nreturns the default value for the type <code>T</code>\nbind the current value using a invariant lifetime guard\n<code>Complex&lt;f32&gt;</code>\n<code>Complex&lt;f64&gt;</code>\ncast a slice of bound values to unbound values\ncast a slice of bound values to unbound values\nchecks if the index is valid, and panics otherwise\nchecks if the index is valid, and panics otherwise\ncolumn vector\ncreates a <code>col::Col</code> containing the arguments\nreturns the composition of <code>self</code> and <code>other</code>\nconcatenates the matrices in each row horizontally, then …\nwrapped config value\nthe number of threads that should ideally execute an …\ndiagonal matrix\ncauses functions that access global parallelism settings …\nreturns the stride in elements\nreturns the last value, equal to the dimension\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nreturns <code>Conj::No</code> if <code>T</code> is the canonical representation, …\ngets the global parallelism settings.\nchecks if the index is valid, returning <code>Some(_)</code> in that …\nchecks if the index is valid, returning <code>Some(_)</code> in that …\nImaginary portion of the complex number\nImaginary portion of the complex number\nreturns an iterator over the indices between <code>from</code> and <code>to</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nde-serialization from common matrix file formats\nreturns <code>self == Conj::Yes</code>\nlinear algebra module\nrectangular matrix\ncreates a <code>Mat</code> containing the arguments.\nwraps the given config value\ncreates new value\nreturns the incremented value, as an inclusive index\npermutation matrix\nuseful imports for general usage of the library\nreturns <code>Par::Rayon(nthreads)</code> if <code>nthreads</code> is non-zero, or …\nReal portion of the complex number\nReal portion of the complex number\nreturns the reversed stride\nrow vector\ncreates a <code>row::Row</code> containing the arguments\nsets the global parallelism settings.\nsparse matrix data structures\nreturns the index <code>0</code>, which is always valid\nstatistics and randomness functionality\nreturns the unbound value, unconstrained by safety …\nassumes the index is valid\nassumes the index is valid\nused to undo the zipping by the <code>zip!</code> macro.\nhelper utilities\nzips together matrix of the same size, so that …\nrequested layout\ntrait for types that can be converted to a column view\ntrait for types that can be converted to a column view\nheap allocated resizable column vector.\nrepresents a type that can be used to slice a column, such …\nmutable view over a column vector, similar to a mutable …\nimmutable view over a column vector, similar to an …\nsliced view type\nsee <code>ColRef::adjoint</code>\nreturns a view over the conjugate transpose of <code>self</code>\nsee <code>ColRef::adjoint</code>\nsee <code>ColRef::adjoint</code>\nsee <code>ColMut::adjoint_mut</code>\nreturns a reference over the elements as a lifetime-bound …\nreturns a reference over the elements as a lifetime-bound …\nreturns a view over <code>self</code>\nreturns a view over <code>self</code>\nsee <code>ColRef::as_diagonal</code>\ninterprets the column as a diagonal matrix\nsee <code>ColRef::as_diagonal</code>\nsee <code>ColRef::as_diagonal</code>\nsee <code>ColMut::as_diagonal_mut</code>\nsee <code>ColRef::as_dyn_rows</code>\nreturns the input column with dynamic row shape\nsee <code>ColRef::as_dyn_rows</code>\nsee <code>ColRef::as_dyn_rows</code>\nsee <code>ColMut::as_dyn_rows_mut</code>\nsee <code>ColRef::as_dyn_stride</code>\nreturns the input column with dynamic stride\nsee <code>ColRef::as_dyn_stride</code>\nsee <code>ColRef::as_dyn_stride</code>\nsee <code>ColMut::as_dyn_stride_mut</code>\nsee <code>ColRef::as_mat</code>\nreturns a matrix view over <code>self</code>\nsee <code>ColRef::as_mat</code>\nsee <code>ColRef::as_mat</code>\nsee <code>ColRef::as_mat</code>\nreturns a view over <code>self</code>\nreturns a view over <code>self</code>\nreturns a pointer to the column data\nreturns a pointer to the column data\nsee <code>ColRef::as_ptr</code>\nsee <code>ColRef::as_ptr</code>\nsee <code>ColMut::as_ptr_mut</code>\nreturns a view over <code>self</code>\nreturns a view over <code>self</code>\nreturns a view over <code>self</code>\nsee <code>ColRef::as_row_shape</code>\nreturns the input column with the given row shape after …\nsee <code>ColRef::as_row_shape</code>\nsee <code>ColRef::as_row_shape</code>\nsee <code>ColMut::as_row_shape_mut</code>\nreturns a reference over the elements as a slice\nreturns a reference over the elements as a slice\nsee <code>ColRef::canonical</code>\nreturns an unconjugated view over <code>self</code>\nsee <code>ColRef::canonical</code>\nsee <code>ColRef::canonical</code>\nsee <code>ColMut::canonical_mut</code>\nsee <code>ColRef::cloned</code>\nreturns a newly allocated column holding the cloned values …\nsee <code>ColRef::cloned</code>\nsee <code>ColRef::conjugate</code>\nreturns a view over the conjugate of <code>self</code>\nsee <code>ColRef::conjugate</code>\nsee <code>ColRef::conjugate</code>\nsee <code>ColMut::conjugate_mut</code>\ncopies <code>other</code> into <code>self</code>\nsee <code>ColMut::copy_from</code>\nfills all the elements of <code>self</code> with <code>value</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nreturns a new column with dimension <code>nrows</code>, filled with the …\ncreates a <code>ColRef</code> from pointers to the column vector data, …\ncreates a <code>ColMut</code> from pointers to the column vector data, …\ncreates a <code>ColRef</code> from slice views over the column vector …\ncreates a <code>ColMut</code> from slice views over the column vector …\nreturns a new column with dimension <code>nrows</code>, filled with …\nslice <code>this</code> using <code>row</code>\nsee <code>ColRef::get</code>\nreturns a reference to the element at the given index, or …\nsee <code>ColRef::get</code>\nsee <code>ColRef::get</code>\nsee <code>ColMut::get_mut</code>\nsee <code>ColRef::get_unchecked</code>\nsee <code>ColMut::get_mut_unchecked</code>\nslice <code>this</code> using <code>row</code>, without bound checks\nsee <code>ColRef::get_unchecked</code>\nreturns a reference to the element at the given index, or …\nsee <code>ColRef::get_unchecked</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nsee <code>ColRef::as_diagonal</code>\nsee <code>ColRef::as_row_shape</code>\nsee <code>ColRef::transpose</code>\nsee <code>ColRef::iter</code>\nreturns an iterator over the elements of the column\nsee <code>ColRef::iter</code>\nsee <code>ColRef::iter</code>\nsee <code>ColMut::iter_mut</code>\nreturns the number of columns of the column (always <code>1</code>)\nreturns the number of columns of the column (always <code>1</code>)\nreturns the number of columns of the column (always <code>1</code>)\nsee <code>ColRef::norm_l1</code>\nreturns the l1 norm of <code>self</code>\nsee <code>ColRef::norm_l1</code>\nsee <code>ColRef::norm_l2</code>\nreturns the l2 norm of <code>self</code>\nsee <code>ColRef::norm_l2</code>\nsee <code>ColRef::norm_max</code>\nreturns the maximum norm of <code>self</code>\nsee <code>ColRef::norm_max</code>\nreturns the number of rows of the column\nreturns the number of rows of the column\nreturns the number of rows of the column\nreturns a new column with dimension <code>nrows</code>, filled with ones\nsee <code>ColRef::par_iter</code>\nreturns a parallel iterator over the elements of the column\nsee <code>ColRef::par_iter</code>\nsee <code>ColRef::par_iter</code>\nsee <code>ColMut::par_iter_mut</code>\nsee <code>ColRef::par_partition</code>\nreturns a parallel iterator that provides exactly <code>count</code> …\nsee <code>ColRef::par_partition</code>\nsee <code>ColRef::par_partition</code>\nsee <code>ColMut::par_partition_mut</code>\nreturns a raw pointer to the element at the given index\nreturns a raw pointer to the element at the given index\nsee <code>ColRef::ptr_at</code>\nsee <code>ColRef::ptr_at</code>\nsee <code>ColMut::ptr_at_mut</code>\nreturns a raw pointer to the element at the given index, …\nreturns a raw pointer to the element at the given index, …\nsee <code>ColRef::ptr_inbounds_at</code>\nsee <code>ColRef::ptr_inbounds_at</code>\nsee <code>ColMut::ptr_inbounds_at_mut</code>\nreserves the minimum capacity for <code>row_capacity</code> rows …\nresizes the column in-place so that the new dimension is …\nsee <code>ColRef::reverse_rows</code>\nreturns a view over the <code>self</code>, with the rows in reversed …\nsee <code>ColRef::reverse_rows</code>\nsee <code>ColRef::reverse_rows</code>\nsee <code>ColMut::reverse_rows_mut</code>\nreturns the row stride of the column, specified in number …\nreturns the row stride of the column, specified in number …\nsee <code>ColRef::row_stride</code>\nreturns the number of rows and columns of the column\nreturns the number of rows and columns of the column\nsee <code>ColRef::shape</code>\nsee <code>ColRef::split_at_row</code>\nsplits the column horizontally at the given row into two …\nsee <code>ColRef::split_at_row</code>\nsee <code>ColRef::split_at_row</code>\nsee <code>ColMut::split_at_row_mut</code>\nsee <code>ColRef::squared_norm_l2</code>\nreturns the squared l2 norm of <code>self</code>\nsee <code>ColRef::squared_norm_l2</code>\nsee <code>ColRef::subrows</code>\nreturns a view over the column starting at row <code>row_start</code>, …\nsee <code>ColRef::subrows</code>\nsee <code>ColRef::subrows</code>\nsee <code>ColMut::subrows_mut</code>\nsee <code>ColRef::sum</code>\nreturns the sum of the elements of <code>self</code>\nsee <code>ColRef::sum</code>\nsee <code>ColRef::to_owned</code>\nreturns a newly allocated column holding the (possibly …\nsee <code>ColRef::to_owned</code>\nsee <code>ColRef::transpose</code>\nreturns a view over the transpose of <code>self</code>\nsee <code>ColRef::transpose</code>\nsee <code>ColRef::transpose</code>\nsee <code>ColMut::transpose_mut</code>\ntruncates the column so that its new dimensions are …\nsee <code>ColRef::try_as_col_major</code>\nreturns a view over the column with a static row stride …\nsee <code>ColRef::try_as_col_major</code>\nsee <code>ColRef::try_as_col_major</code>\nsee <code>ColRef::try_as_col_major</code>\nreserves the minimum capacity for <code>row_capacity</code> rows …\nreturns a new column with dimension <code>nrows</code>, filled with …\ntrait for types that can be converted to a diagonal matrix …\ntrait for types that can be converted to a diagonal matrix …\ndiagonal matrix\ndiagonal mutable matrix view\ndiagonal matrix view\ndimension type\nscalar type\nreturns a view over <code>self</code>\nreturns a view over <code>self</code>\nsee <code>DiagRef::as_dyn</code>\nreturns the input matrix with dynamic shape\nsee <code>DiagRef::as_dyn</code>\nsee <code>DiagRef::as_dyn</code>\nsee <code>DiagMut::as_dyn_mut</code>\nsee <code>DiagRef::as_dyn_stride</code>\nreturns the input matrix with dynamic stride\nsee <code>DiagRef::as_dyn_stride</code>\nreturns a view over <code>self</code>\nreturns a view over <code>self</code>\nreturns a view over <code>self</code>\nreturns a view over <code>self</code>\nreturns a view over <code>self</code>\nsee <code>DiagRef::as_shape</code>\nreturns the input matrix with the given shape after …\nsee <code>DiagRef::as_shape</code>\nsee <code>DiagRef::as_shape</code>\nsee <code>DiagMut::as_shape_mut</code>\nsee <code>DiagRef::canonical</code>\nreturns an unconjugated view over <code>self</code>\nsee <code>DiagRef::canonical</code>\nsee <code>DiagRef::canonical</code>\nsee <code>DiagMut::canonical_mut</code>\nreturns the diagonal as a column vector view\nreturns the diagonal as a column vector view.\nreturns the diagonal as a column vector\nreturns the diagonal as a mutable column vector view\nreturns the diagonal as a column vector\nsee <code>DiagRef::conjugate</code>\nreturns a view over the conjugate of <code>self</code>\nsee <code>DiagRef::conjugate</code>\nsee <code>DiagRef::conjugate</code>\nsee <code>DiagMut::conjugate_mut</code>\ncopies <code>other</code> into <code>self</code>\ncopies <code>other</code> into <code>self</code>\nreturns the dimension of <code>self</code>\nreturns the dimension of <code>self</code>\nreturns the dimension of <code>self</code>\nfills all the elements of <code>self</code> with <code>value</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nreturns a new diagonal with dimension <code>dim</code>, filled with …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nreturns the diagonal as a column vector\nreturns a new diagonal with dimension <code>dim</code>, filled with ones\nreturns a new diagonal with dimension <code>dim</code>, filled with …\nnpy format conversions\n32-bit complex floating point\n64-bit complex floating point\ndata type of the buffer data\n32-bit floating point\n64-bit floating point\ntrait implemented for native types that can be read from a …\nmemory view over a buffer in <code>npy</code> format\ndata type of an <code>npy</code> buffer\nunknown type\nif the memory buffer is aligned, and the provided type …\nreturns the data type of the memory buffer\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nchecks if the memory buffer is aligned, in which case the …\nparse a npy file from a memory buffer\nif the provided type matches the one stored in the buffer, …\nlow level implementation of the various cholesky-like …\nlow level implementation of the eigenvalue decomposition …\nblock householder transformations\njacobi rotation matrix\nkronecker product\nlow level implementation of the various $LU$ decompositions\nmatrix multiplication\n<code>faer</code> provides utilities for computing and manipulating the …\nhigh level solvers\nlow level implementation of the svd of a matrix\nreturns the stack requirements for creating a temporary …\ncreates a temporary matrix of uninit values, from the …\ncreates a temporary matrix of zero values, from the given …\ntriangular matrix inverse\ntriangular matrix solve Triangular solve module.\nmatrix zipping implementation\nthe bunch kaufman decomposition of a self-adjoint matrix …\nthe $L D L^\\top$ decomposition of a self-adjoint positive …\nthe $L L^\\top$ decomposition of a self-adjoint positive …\nthe pivoted $L L^\\top$ decomposition of a self-adjoint …\ninfo about the result of the bunch-kaufman factorization\ntuning parameters for the decomposition\ndynamic bunch-kaufman regularization\ndeprecated, corresponds to partial pivoting\nsearches for pivots that are globally optimal\nsearches for the k-th pivot in the k-th column\nsearches for the k-th pivot in the k-th column, as well as …\npivoting strategy for choosing the pivots\nsearches for pivots that are locally optimal\nsearches for pivots that are locally optimal, as well as …\nblock size of the algorithm\ncomputes the bunch-kaufman factorization of $A$ and stores …\ncomputes the size and alignment of required workspace for …\nnumber of pivots whose value or sign had to be corrected\nregularized value\nregularization threshold\nexpected signs for the diagonal at each step of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nthreshold at which size parallelism should be disabled\npivoting strategy\nnumber of pivoting transpositions\ncomputes the size and alignment of required workspace for …\ngiven the bunch-kaufman factors of a matrix $a$ and a …\nerror in the $LDL^\\top$ factorization.\ninfo about the result of the $LDL^\\top$ factorization.\ndynamic $LDL^\\top$ regularization. values below <code>epsilon</code> in …\nnumber of pivots whose value or sign had to be corrected.\nregularized value.\nregularization threshold.\nexpected signs for the diagonal at each step of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nerror in the $LL^\\top$ factorization\ninfo about the result of the $LL^\\top$ factorization\ndynamic $LL^\\top$ regularization.\nnumber of pivots whose value or sign had to be corrected\nregularized value\nregularization threshold\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nnumerical rank of the matrix\nnumber of transpositions that make up the permutation\nwhether the eigenvectors should be computed\neigendecomposition error\nschur to eigendecomposition conversion parameters\neigendecomposition tuning parameters\ndo not compute eigenvectors\nreached max iterations\nself-adjoint eigendecomposition tuning parameters\ncompute eigenvectors\ncomputes the matrix $A$’s eigendecomposition\neigendecomposition from schur conversion parameters\ncomputes the matrix $A$’s eigendecomposition\ncomputes the size and alignment of the workspace required …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nhessenberg decomposition\nhessenberg parameters\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ncomputes a self-adjoint matrix’s pseudoinverse, given …\ncomputes the size and alignment of the workspace required …\ncomputes a self-adjoint matrix’s pseudoinverse, given …\nthreshold at which the implementation should stop recursing\nthreshold at which the implementation should stop recursing\nschur from hessenberg conversion parameters\ncomputes the matrix $A$’s eigendecomposition, assuming …\ncomputes the size and alignment of the workspace required …\nself-adjoint tridiagonalization\ntridiagonalization parameters\nhessenberg factorization tuning parameters\nthreshold at which parallelism should be disabled\nReturns the argument unchanged.\ncomputes a matrix $A$’s hessenberg decomposition such …\ncomputes the size and alignment of the workspace required …\nCalls <code>U::from(self)</code>.\nthreshold at which parallelism should be disabled\ntridiagonalization tuning parameters\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nthreshold at which parallelism should be disabled\ncomputes a self-adjoint matrix $A$’s tridiagonalization …\ncomputes the size and alignment of the workspace required …\ncomputes the size and alignment of required workspace for …\ncomputes the product of the given block householder …\ncomputes the size and alignment of required workspace for …\ncomputes the product of the matrix, multiplied by the …\ncomputes the size and alignment of required workspace for …\ncomputes the product of a sequence of block householder …\ncomputes the size and alignment of required workspace for …\ncomputes the product of <code>matrix</code>, multiplied by a sequence …\ncomputes the size and alignment of required workspace for …\ncomputes the product of the transpose of a sequence block …\ncomputes the size and alignment of required workspace for …\ncomputes the product of <code>matrix</code>, multiplied by the …\ncomputes the size and alignment of required workspace for …\ncomputes the product of the transpose of the given block …\ncomputes the size and alignment of required workspace for …\ncomputes the product of the matrix, multiplied by the …\ncomputes the householder reflection $I - \\frac{v …\njacobi rotation matrix\nreturns the adjoint of <code>self</code>\napply to the given matrix from the left\napply from the left to $x$ and $y$\napply to the given matrix from the right\napply from the right to $x$ and $y$\ncosine\nreturns the conjugate of <code>self</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nsine\nreturns the transpose of <code>self</code>\nkronecker product of two matrices\nthe full pivoting $LU$ decomposition is such that: $$P A …\nthe partial pivoting $LU$ decomposition is such that: $$PA …\n$LU$ factorization tuning parameters\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nthreshold at which size parallelism should be disabled\nerror in the $LU$ factorization\ninformation about the resulting $LU$ factorization\n$LU$ factorization tuning parameters\nblocking variant step size\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nthreshold at which size parallelism should be disabled\nthreshold at which the implementation should stop recursing\nnumber of transpositions that were performed, can be used …\ndot product\ncomputes the matrix product …\ncomputes the matrix product …\ntriangular matrix multiplication module, where some of the …\nreturns <code>lhs * rhs</code>, implicitly conjugating the operands if …\ndescribes the parts of the matrix that must be accessed.\nthe full matrix is accessed.\nthe lower triangular half (excluding the diagonal) is …\nthe upper triangular half (excluding the diagonal) is …\nthe lower triangular half (including the diagonal) is …\nthe upper triangular half (including the diagonal) is …\nthe lower triangular half (excluding the diagonal, which …\nthe upper triangular half (excluding the diagonal, which …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nchecks if <code>self</code> is full.\nchecks if <code>self</code> is triangular lower (either inclusive or …\nchecks if <code>self</code> is triangular upper (either inclusive or …\ncomputes the matrix product …\ncomputes the matrix product …\nreturns the block structure corresponding to the …\nthe $QR$ decomposition with column pivoting decomposes a …\nthe $QR$ decomposition decomposes a matrix $A$ into the …\ninformation about the resulting $QR$ factorization.\n$QR$ factorization with column pivoting tuning parameters\nthreshold at which blocking algorithms should be disabled\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nthreshold at which the parallelism should be disabled\ncomputes the size and alignment of required workspace for …\nnumber of transpositions that were performed, can be used …\n$QR$ factorization tuning parameters.\nthreshold at which blocking algorithms should be disabled\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nthreshold at which the parallelism should be disabled\ncomputes the size and alignment of required workspace for …\nthe recommended block size to use for a $QR$ decomposition …\nreturns the diagonal of the $B$ factor\nreturns the subdiagonal of the $B$ factor\n$QR$ decomposition with column pivoting\nreturns the $D$ factor\n<code>DenseSolveCore</code> extension trait\ndense linear system solver\neigendecomposition\n$LU$ decomposition with full pivoting\nreturns the $L$ factor\nreturns the $L$ factor\nreturns the $L$ factor\nreturns the $L$ factor\nreturns the factor $L$\nbunch-kaufman decomposition\n$L D L^\\top$ decomposition\n$L L^\\top$ decomposition\nreturns the pivoting permutation $P$\nreturns the row pivoting permutation $P$\nreturns the row pivoting permutation $P$\nreturns the column pivoting permutation $P$\n$LU$ decomposition with partial (row) pivoting\nreturns the column pivoting permutation $P$\nreturns the householder basis of $Q$\nreturns the householder basis of $Q$\nreturns the householder coefficients of $Q$\nreturns the householder coefficients of $Q$\n$QR$ decomposition\nreturns the factor $R$\nreturns the factor $R$\nreturns the factor $S$\nreturns the factor $S$\nreturns the factor $S$\nself-adjoint eigendecomposition\nshape info of a linear system solver\n<code>SolveCore</code> extension trait\nlinear system solver implementation\n<code>SolveLstsqCore</code> extension trait\nleast squares linear system solver implementation\nsvd decomposition (either full or thin)\nreturns the $U$ factor\nreturns the factor $U$\nreturns the factor $U$\nreturns the factor $U$\nreturns the factor $U$\nreturns the factor $V$\ncomputes the factor $Q$\ncomputes the factor $Q$\ncomputes the first $\\min(\\text{nrows}, \\text{ncols})$ …\ncomputes the first $\\min(\\text{nrows}, \\text{ncols})$ …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nreturns an approximation of the inverse of the matrix that …\nreturns the number of columns of the matrix\nreturns the $L L^\\top$ decomposition of $A$\nreturns the $L D L^\\top$ decomposition of $A$\nreturns the bunch-kaufman decomposition of $A$\nreturns the $LU$ decomposition of $A$ with partial pivoting\nreturns the $LU$ decomposition of $A$ with full pivoting\nreturns the $QR$ decomposition of $A$\nreturns the $QR$ decomposition of $A$ with column pivoting\nreturns the svd of $A$\nreturns the eigendecomposition of $A$, assuming it is …\nreturns the eigendecomposition of $A$\nreturns the eigendecomposition of $A$\nreturns the thin svd of $A$\nreturns the number of rows of the matrix\nreturns an approximation of the matrix that was used to …\nsolves $x A = b$\nsolves $x A^H = b$\nsolves $x A^H = b$\nsolves $x \\bar A = b$\nsolves $x \\bar A = b$\nsolves $x A = b$\nsolves $x A^\\top = b$\nsolves $x A^\\top = b$\nsolves $A x = b$\nsolves $A^H x = b$\nsolves $A^H x = b$\nsolves $\\bar A x = b$\nsolves $\\bar A x = b$\nsolves $A x = b$\nsolves the equation <code>self × x = rhs</code>, implicitly …\nsolves the equation <code>self × x = rhs</code> in the sense of least …\nsolves $A^\\top x = b$\nsolves $A^\\top x = b$\nsolves the equation <code>self.transpose() × x = rhs</code>, …\nreturns the upper trapezoidal part of $R$\nreturns the upper trapezoidal part of $R$\nwhether the singular vectors should be computed\ncompute singular vectors\ndo not compute singular vectors\nreached max iterations\nsvd error\nsvd tuning parameters\ncompute the first $\\min(\\text{nrows}, \\text{ncols})$ …\nbidiagonalization\nbidiagonalization parameters\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ncomputes a self-adjoint matrix’s pseudoinverse, given …\ncomputes the size and alignment of the workspace required …\ncomputes a self-adjoint matrix’s pseudoinverse, given …\n$QR$ parameters\nthreshold at which parallelism should be disabled\nthreshold at which the implementation should stop recursing\ncomputes the svd of $A$, with the singular vectors being …\ncomputes the size and alignment of the workspace required …\nbidiagonalization tuning parameters.\ncomputes a matrix $A$’s bidiagonalization such that $A = …\ncomputes the size and alignment of the workspace required …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nthreshold at which parallelism should be disabled\ncomputes the inverse of the lower triangular matrix <code>src</code> …\ncomputes the inverse of the lower triangular matrix <code>src</code> …\ncomputes the inverse of the upper triangular matrix <code>src</code> …\ncomputes the inverse of the upper triangular matrix <code>src</code> …\nsolves $L x = b$, implicitly conjugating $L$ if needed, …\nsolves $L x = b$, implicitly conjugating $L$ if needed, …\nsolves $L x = b$, replacing the diagonal of $L$ with ones, …\nsolves $L x = b$, replacing the diagonal of $L$ with ones, …\nsolves $U x = b$, replacing the diagonal of $U$ with ones, …\nsolves $U x = b$, replacing the diagonal of $U$ with ones, …\nsolves $U x = b$, implicitly conjugating $U$ if needed, …\nsolves $U x = b$, implicitly conjugating $U$ if needed, …\ntype of columns\nmatrix type with type erased dimensions\nindexing type\nitem produced by the zip views\nsingle element\nsingle matrix\nlayout transformation type\ntype with a given matrix shape\nmatrix layout transformation. used for zipping …\nmatrix is used as-is\nvector is used as-is\nvector is reversed\nmatrix rows are reversed\ntype of rows\nmatrix is transposed\nmatrix is transposed, then rows are reversed\nvector layout transformation. used for zipping …\nzipped elements\nzipped matrices\napplies <code>f</code> to each element of <code>self</code>\napplies <code>f</code> to each element of <code>self</code>\napplies <code>f</code> to each element of <code>self</code>\napplies <code>f</code> to each element of <code>self</code>\napplies <code>f</code> to each element of <code>self</code>\napplies <code>f</code> to each element of <code>self</code>\napplies <code>f</code> to each element of the lower triangular half of …\napplies <code>f</code> to each element of the lower triangular half of …\napplies <code>f</code> to each element of the lower triangular half of …\napplies <code>f</code> to each element of the lower triangular half of …\napplies <code>f</code> to each element of the upper triangular half of …\napplies <code>f</code> to each element of the upper triangular half of …\napplies <code>f</code> to each element of the upper triangular half of …\napplies <code>f</code> to each element of the upper triangular half of …\napplies <code>f</code> to each element of <code>self</code>, while passing the …\napplies <code>f</code> to each element of <code>self</code>, while passing the …\napplies <code>f</code> to each element of <code>self</code>, while passing the …\napplies <code>f</code> to each element of <code>self</code>, while passing the …\napplies <code>f</code> to each element of <code>self</code>, while passing the …\napplies <code>f</code> to each element of <code>self</code>, while passing the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nconverts a type erased index back to its original …\nreturns slice at index of length <code>n_elems</code>\nget the item at the given index, skipping bound checks\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nchecks if the zip matrices are contiguous\napplies <code>f</code> to each element of <code>self</code> and collect its result …\napplies <code>f</code> to each element of <code>self</code> and collect its result …\napplies <code>f</code> to each element of <code>self</code> and collect its result …\napplies <code>f</code> to each element of <code>self</code> and collect its result …\napplies <code>f</code> to each element of <code>self</code> and collect its result …\napplies <code>f</code> to each element of <code>self</code> and collect its result …\napplies <code>f</code> to each element of <code>self</code> and collect its result …\napplies <code>f</code> to each element of <code>self</code> and collect its result …\napplies <code>f</code> to each element of <code>self</code> and collect its result …\napplies <code>f</code> to each element of <code>self</code> and collect its result …\napplies <code>f</code> to each element of <code>self</code> and collect its result …\napplies <code>f</code> to each element of <code>self</code> and collect its result …\nreturns the number of columns\ncreates a zip matrix, after asserting that the dimensions …\ncreates a zip matrix, assuming that the dimensions match\nget the item at the given slice position, skipping bound …\nreturns the number of rows\ncomputes the preferred iteration layout of the matrices\napplies the layout transformation to the matrices\ntrait for owning matrix types\ntrait for types that can be converted to a matrix view\ntrait for types that can be converted to a matrix view\ncolumn dimension type\nheap allocated resizable matrix, similar to a 2d …\nrepresents a type that can be used to slice a matrix, such …\nmutable view over a matrix, similar to a mutable reference …\nimmutable view over a matrix, similar to an immutable …\nowned matrix type\nrow dimension type\nscalar type\nsliced view type\nsee <code>MatRef::adjoint</code>\nsee <code>MatRef::adjoint</code>\nreturns a view over the conjugate transpose of <code>self</code>.\nsee <code>MatRef::adjoint</code>\nsee <code>MatMut::adjoint_mut</code>\nsee <code>MatRef::as_col_shape</code>\nsee <code>MatRef::as_col_shape</code>\nreturns the input matrix with the given column shape after …\nsee <code>MatRef::as_col_shape</code>\nsee <code>MatMut::as_col_shape_mut</code>\nsee <code>MatRef::as_dyn</code>\nsee <code>MatRef::as_dyn</code>\nreturns the input matrix with dynamic shape\nsee <code>MatRef::as_dyn_cols</code>\nsee <code>MatRef::as_dyn_cols</code>\nreturns the input matrix with dynamic column shape\nsee <code>MatRef::as_dyn_cols</code>\nsee <code>MatMut::as_dyn_cols_mut</code>\nsee <code>MatRef::as_dyn</code>\nsee <code>MatMut::as_dyn_mut</code>\nsee <code>MatRef::as_dyn_rows</code>\nsee <code>MatRef::as_dyn_rows</code>\nreturns the input matrix with dynamic row shape\nsee <code>MatRef::as_dyn_rows</code>\nsee <code>MatMut::as_dyn_rows_mut</code>\nsee <code>MatRef::as_dyn_stride</code>\nsee <code>MatRef::as_dyn_stride</code>\nreturns the input matrix with dynamic stride\nsee <code>MatRef::as_dyn_stride</code>\nsee <code>MatMut::as_dyn_stride_mut</code>\nreturns a view over <code>self</code>\nreturns a view over <code>self</code>\nreturns a view over <code>self</code>\nreturns a view over <code>self</code>\nreturns a pointer to the matrix data\nreturns a pointer to the matrix data\nreturns a pointer to the matrix data\nsee <code>MatRef::as_ptr</code>\nreturns a pointer to the matrix data\nreturns a view over <code>self</code>\nreturns a view over <code>self</code>\nreturns a view over <code>self</code>\nsee <code>MatRef::as_row_shape</code>\nsee <code>MatRef::as_row_shape</code>\nreturns the input matrix with the given row shape after …\nsee <code>MatRef::as_row_shape</code>\nsee <code>MatMut::as_row_shape_mut</code>\nsee <code>MatRef::as_shape</code>\nsee <code>MatRef::as_shape</code>\nreturns the input matrix with the given shape after …\nsee <code>MatRef::as_shape</code>\nsee <code>MatMut::as_shape_mut</code>\nsee [<code>MatRef::)]</code>]\t#[doc(hidden)]\nsee <code>MatRef::canonical</code>\nsee <code>MatRef::canonical</code>\nreturns an unconjugated view over <code>self</code>\nsee <code>MatRef::canonical</code>\nsee <code>MatMut::canonical_mut</code>\nsee <code>MatRef::cloned</code>\nsee <code>MatRef::cloned</code>\nreturns a newly allocated matrix holding the cloned values …\nsee <code>MatRef::col</code>\nsee <code>MatRef::col</code>\nreturns a view over the column at the given index\nreturns a reference to a slice over the column at the …\nreturns a reference to a slice over the column at the …\nsee <code>MatRef::col_iter</code>\nsee <code>MatRef::col_iter</code>\nreturns an iterator over the columns of the matrix\nsee <code>MatRef::col_iter</code>\nsee <code>MatMut::col_iter_mut</code>\nsee <code>MatRef::col</code>\nsee <code>MatMut::col_mut</code>\nreturns the $QR$ decomposition of <code>self</code> with column pivoting\nreturns the $QR$ decomposition of <code>self</code> with column pivoting\nreturns the $QR$ decomposition of <code>self</code> with column pivoting\nreturns the column stride of the matrix, specified in …\nreturns the column stride of the matrix, specified in …\nreturns the column stride of the matrix, specified in …\nsee <code>MatRef::conjugate</code>\nsee <code>MatRef::conjugate</code>\nreturns a view over the conjugate of <code>self</code>\nsee <code>MatRef::conjugate</code>\nsee <code>MatMut::conjugate_mut</code>\ncopies <code>other</code> into <code>self</code>\nsee <code>MatMut::copy_from</code>\ncopies the lower triangular half of <code>other</code>, excluding the …\nsee <code>MatMut::copy_from_strict_triangular_lower</code>\ncopies the upper triangular half of <code>other</code>, excluding the …\nsee <code>MatMut::copy_from_strict_triangular_upper</code>\ncopies the lower triangular half of <code>other</code>, including the …\nsee <code>MatMut::copy_from_triangular_lower</code>\ncopies the upper triangular half of <code>other</code>, including the …\nsee <code>MatMut::copy_from_triangular_upper</code>\nsee <code>MatRef::determinant</code>\nsee <code>MatRef::determinant</code>\nreturns the determinant of <code>self</code>\nsee <code>MatRef::diagonal</code>\nsee <code>MatRef::diagonal</code>\nreturns the diagonal of the matrix\nsee <code>MatRef::diagonal</code>\nsee <code>MatMut::diagonal_mut</code>\nreturns the eigendecomposition of <code>self</code>\nreturns the eigendecomposition of <code>self</code>\nreturns the eigendecomposition of <code>self</code>\nreturns the eigendecomposition of <code>self</code>\nreturns the eigendecomposition of <code>self</code>\nreturns the eigendecomposition of <code>self</code>\nreturns the eigenvalues of <code>self</code>\nreturns the eigenvalues of <code>self</code>\nreturns the eigenvalues of <code>self</code>\nreturns the eigenvalues of <code>self</code>\nreturns the eigenvalues of <code>self</code>\nreturns the eigenvalues of <code>self</code>\nfills all the elements of <code>self</code> with <code>value</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nequivalent to …\nequivalent to …\ncreates a <code>MatRef</code> from slice views over the matrix data, …\ncreates a <code>MatMut</code> from slice views over the matrix data, …\ncreates a <code>MatRef</code> from slice views over the matrix data, …\ncreates a <code>MatMut</code> from slice views over the matrix data, …\nreturns a new matrix with dimensions <code>(nrows, ncols)</code>, …\ncreates a <code>MatRef</code> from a pointer to the matrix data, …\ncreates a <code>MatMut</code> from a pointer to the matrix data, …\ncreates a <code>1×1</code> view over the given element\ncreates a <code>MatRef</code> from a view over a single element, …\nequivalent to …\nequivalent to …\ncreates a <code>MatRef</code> from slice views over the matrix data, …\ncreates a <code>MatMut</code> from slice views over the matrix data, …\ncreates a <code>MatRef</code> from slice views over the matrix data, …\ncreates a <code>MatMut</code> from slice views over the matrix data, …\nreturns a new matrix with dimensions <code>(nrows, ncols)</code>, …\nreturns the $LU$ decomposition of <code>self</code> with full pivoting\nreturns the $LU$ decomposition of <code>self</code> with full pivoting\nreturns the $LU$ decomposition of <code>self</code> with full pivoting\nslice <code>this</code> using <code>row</code> and <code>col</code>\nsee <code>MatRef::get</code>\nsee <code>MatRef::get</code>\nreturns references to the element at the given index, or …\nequivalent to <code>self.get(.., col)</code>\nsee <code>MatRef::get</code>\nsee <code>MatMut::get_mut</code>\nsee <code>MatRef::get_unchecked</code>\nsee <code>MatMut::get_mut_unchecked</code>\nequivalent to <code>self.get(row, ..)</code>\nslice <code>this</code> using <code>row</code> and <code>col</code> without bound checks\nsee <code>MatRef::get_unchecked</code>\nsee <code>MatRef::get_unchecked</code>\nreturns references to the element at the given index, or …\nreturns a new identity matrix, with ones on the diagonal …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nsee <code>MatRef::as_shape</code>\nreturns the bunch-kaufman decomposition of <code>self</code>\nreturns the bunch-kaufman decomposition of <code>self</code>\nreturns the bunch-kaufman decomposition of <code>self</code>\nreturns the $L D L^\\top$ decomposition of <code>self</code>\nreturns the $L D L^\\top$ decomposition of <code>self</code>\nreturns the $L D L^\\top$ decomposition of <code>self</code>\nreturns the $L L^\\top$ decomposition of <code>self</code>\nreturns the $L L^\\top$ decomposition of <code>self</code>\nreturns the $L L^\\top$ decomposition of <code>self</code>\nreturns the number of columns of the matrix\nreturns the number of columns of the matrix\nreturns the number of columns of the matrix\nreturns an empty matrix of dimension <code>0×0</code>.\nsee <code>MatRef::norm_l1</code>\nreturns the l1 norm of <code>self</code>\nsee <code>MatRef::norm_l2</code>\nsee <code>MatRef::norm_l2</code>\nreturns the l2 norm of <code>self</code>\nsee <code>MatRef::norm_max</code>\nsee <code>MatRef::norm_max</code>\nreturns the maximum norm of <code>self</code>\nreturns the number of rows of the matrix\nreturns the number of rows of the matrix\nreturns the number of rows of the matrix\nreturns a new matrix with dimensions <code>(nrows, ncols)</code>, …\nsee <code>MatRef::par_col_chunks</code>\nsee <code>MatRef::par_col_chunks</code>\nreturns a parallel iterator that provides successive …\nsee <code>MatRef::par_col_chunks</code>\nsee <code>MatMut::par_col_chunks_mut</code>\nsee <code>MatRef::par_col_iter</code>\nsee <code>MatRef::par_col_iter</code>\nreturns a parallel iterator over the columns of the matrix\nsee <code>MatRef::par_col_iter</code>\nsee <code>MatMut::par_col_iter_mut</code>\nsee <code>MatRef::par_col_partition</code>\nsee <code>MatRef::par_col_partition</code>\nreturns a parallel iterator that provides exactly <code>count</code> …\nsee <code>MatRef::par_col_partition</code>\nsee <code>MatMut::par_col_partition_mut</code>\nsee <code>MatRef::par_row_chunks</code>\nsee <code>MatRef::par_row_chunks</code>\nreturns a parallel iterator that provides successive …\nsee <code>MatRef::par_row_chunks</code>\nsee <code>MatMut::par_row_chunks_mut</code>\nsee <code>MatRef::par_row_iter</code>\nsee <code>MatRef::par_row_iter</code>\nreturns a parallel iterator over the rows of the matrix\nsee <code>MatRef::par_row_iter</code>\nsee <code>MatMut::par_row_iter_mut</code>\nsee <code>MatRef::par_row_partition</code>\nsee <code>MatRef::par_row_partition</code>\nreturns a parallel iterator that provides exactly <code>count</code> …\nsee <code>MatRef::par_row_partition</code>\nsee <code>MatMut::par_row_partition_mut</code>\nreturns the $LU$ decomposition of <code>self</code> with partial (row) …\nreturns the $LU$ decomposition of <code>self</code> with partial (row) …\nreturns the $LU$ decomposition of <code>self</code> with partial (row) …\nreturns a raw pointer to the element at the given index\nreturns a raw pointer to the element at the given index\nreturns a raw pointer to the element at the given index\nsee <code>MatRef::ptr_at</code>\nreturns a raw pointer to the element at the given index\nreturns a raw pointer to the element at the given index, …\nreturns a raw pointer to the element at the given index, …\nreturns a raw pointer to the element at the given index, …\nsee <code>MatRef::ptr_inbounds_at</code>\nreturns a raw pointer to the element at the given index, …\ninserts a col at the end of the matrix\ninserts a row at the end of the matrix\nreturns the $QR$ decomposition of <code>self</code>\nreturns the $QR$ decomposition of <code>self</code>\nreturns the $QR$ decomposition of <code>self</code>\nreserves the minimum capacity for <code>new_row_capacity</code> rows …\nresizes the matrix in-place so that the new dimensions are …\nsee <code>MatRef::reverse_cols</code>\nsee <code>MatRef::reverse_cols</code>\nreturns a view over the <code>self</code>, with the columns in reversed …\nsee <code>MatRef::reverse_cols</code>\nsee <code>MatMut::reverse_cols_mut</code>\nsee <code>MatRef::reverse_rows</code>\nsee <code>MatRef::reverse_rows</code>\nreturns a view over the <code>self</code>, with the rows in reversed …\nsee <code>MatRef::reverse_rows_and_cols</code>\nsee <code>MatRef::reverse_rows_and_cols</code>\nreturns a view over the <code>self</code>, with the rows and the …\nsee <code>MatRef::reverse_rows_and_cols</code>\nsee <code>MatMut::reverse_rows_and_cols_mut</code>\nsee <code>MatRef::reverse_rows</code>\nsee <code>MatMut::reverse_rows_mut</code>\nsee <code>MatRef::row</code>\nsee <code>MatRef::row</code>\nreturns a view over the row at the given index\nsee <code>MatRef::row_iter</code>\nsee <code>MatRef::row_iter</code>\nreturns an iterator over the rows of the matrix\nsee <code>MatRef::row_iter</code>\nsee <code>MatMut::row_iter_mut</code>\nsee <code>MatRef::row</code>\nsee <code>MatMut::row_mut</code>\nreturns the row stride of the matrix, specified in number …\nreturns the row stride of the matrix, specified in number …\nreturns the row stride of the matrix, specified in number …\nreturns the eigendecomposition of <code>self</code>, assuming it is …\nreturns the eigendecomposition of <code>self</code>, assuming it is …\nreturns the eigendecomposition of <code>self</code>, assuming it is …\nreturns the eigenvalues of <code>self</code>, assuming it is …\nreturns the eigenvalues of <code>self</code>, assuming it is …\nreturns the eigenvalues of <code>self</code>, assuming it is …\nset the dimensions of the matrix.\nreturns the number of rows and columns of the matrix\nreturns the number of rows and columns of the matrix\nreturns the number of rows and columns of the matrix\nreturns the singular values of <code>self</code>\nreturns the singular values of <code>self</code>\nreturns the singular values of <code>self</code>\nsee <code>MatRef::split_at</code>\nsee <code>MatRef::split_at</code>\nsplits the matrix horizontally and vertically at the given …\nsee <code>MatRef::split_at_col</code>\nsee <code>MatRef::split_at_col</code>\nsplits the matrix vertically at the given column into two …\nsee <code>MatRef::split_at_col</code>\nsee <code>MatMut::split_at_col_mut</code>\nsee <code>MatRef::split_at</code>\nsee <code>MatMut::split_at_mut</code>\nsee <code>MatRef::split_at_row</code>\nsee <code>MatRef::split_at_row</code>\nsplits the matrix horizontally at the given row into two …\nsee <code>MatRef::split_at_row</code>\nsee <code>MatMut::split_at_row_mut</code>\nsee <code>MatRef::split_first_col</code>\nreturns a reference to the first column and a view over …\nsee <code>MatRef::split_first_col</code>\nsee <code>MatRef::split_first_row</code>\nreturns a reference to the first row and a view over the …\nsee <code>MatRef::split_first_row</code>\nsee <code>MatMut::split_first_row_mut</code>\nsee <code>MatRef::split_last_col</code>\nreturns a reference to the last column and a view over the …\nsee <code>MatRef::split_last_col</code>\nsee <code>MatRef::split_last_row</code>\nreturns a reference to the last row and a view over the …\nsee <code>MatRef::split_last_row</code>\nsee <code>MatRef::squared_norm_l2</code>\nreturns the squared l2 norm of <code>self</code>\nsee <code>MatRef::subcols</code>\nsee <code>MatRef::subcols</code>\nreturns a view over the submatrix starting at column …\nsee <code>MatRef::subcols</code>\nsee <code>MatMut::subcols_mut</code>\nsee <code>MatRef::submatrix</code>\nsee <code>MatRef::submatrix</code>\nreturns a view over the submatrix starting at index …\nsee <code>MatRef::submatrix</code>\nsee <code>MatMut::submatrix_mut</code>\nsee <code>MatRef::subrows</code>\nsee <code>MatRef::subrows</code>\nreturns a view over the submatrix starting at row <code>row_start</code>…\nsee <code>MatRef::subrows</code>\nsee <code>MatMut::subrows_mut</code>\nsee <code>MatRef::sum</code>\nreturns the sum of the elements of <code>self</code>\nreturns the svd of <code>self</code>\nreturns the svd of <code>self</code>\nreturns the svd of <code>self</code>\nreturns the thin svd of <code>self</code>\nreturns the thin svd of <code>self</code>\nreturns the thin svd of <code>self</code>\nsee <code>MatRef::to_owned</code>\nsee <code>MatRef::to_owned</code>\nreturns a newly allocated matrix holding the (possibly …\nsee <code>MatRef::transpose</code>\nsee <code>MatRef::transpose</code>\nreturns a view over the transpose of <code>self</code>\nsee <code>MatRef::transpose</code>\nsee <code>MatMut::transpose_mut</code>\ntruncates the matrix so that its new dimensions are …\nsee <code>MatRef::try_as_col_major</code>\nsee <code>MatRef::try_as_col_major</code>\nreturns a view over the matrix with a static row stride …\nsee <code>MatRef::try_as_col_major</code>\nsee <code>MatMut::try_as_col_major_mut</code>\nsee <code>MatRef::try_as_row_major</code>\nsee <code>MatRef::try_as_row_major</code>\nreturns a view over the matrix with a static column stride …\nsee <code>MatRef::try_as_row_major</code>\nsee <code>MatMut::try_as_row_major_mut</code>\nreserves the minimum capacity for <code>new_row_capacity</code> rows …\nreturns two views over the given columns\nsee <code>MatMut::two_cols_mut</code>\nreturns two views over the given rows\nsee <code>MatMut::two_rows_mut</code>\nreserves the minimum capacity for <code>row_capacity</code> rows and …\nreturns a matrix with dimensions <code>(rows, cols)</code> filled with …\nreturns a new matrix with dimensions <code>(nrows, ncols)</code>, …\npermutation matrix\nimmutable permutation matrix view\nreturns the permutation as an array\nconvert <code>self</code> to a permutation view.\nconvert <code>self</code> to a permutation view\nreturns the input permutation with the given shape after …\nreturns the input permutation with the given shape after …\nreturns the permutation as an array\ncast the permutation to the fixed width index type\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nreturns the permutation as an array\nreturns the inverse permutation\nreturns the input permutation with the given shape after …\nreturns the inverse permutation\nreturns the dimension of the permutation\nreturns the dimension of the permutation\ncreates a new permutation, by checking the validity of the …\ncreates a new permutation, by checking the validity of the …\ncreates a new permutation reference, without checking the …\ncreates a new permutation reference, without checking the …\ncomputes a permutation of the columns of the source matrix …\ncomputes a permutation of the columns of the matrix using …\ncomputes the size and alignment of required workspace for …\ncomputes a permutation of the rows of the source matrix …\ncomputes a permutation of the rows of the matrix using the …\ncomputes the size and alignment of required workspace for …\nswaps the values in the columns <code>a</code> and <code>b</code>\nswaps the two columns at indices <code>a</code> and <code>b</code> in the given …\nswaps the values in the rows <code>a</code> and <code>b</code>\nswaps the two rows at indices <code>a</code> and <code>b</code> in the given matrix\ncast the permutation from the fixed width index type\nsee <code>Default</code>\ncreates a <code>Mat</code> containing the arguments.\ntrait for types that can be converted to a row view\ntrait for types that can be converted to a row view\nheap allocated resizable row vector.\nrepresents a type that can be used to slice a row, such as …\nmutable view over a row vector, similar to a mutable …\nimmutable view over a row vector, similar to an immutable …\nsliced view type\nsee <code>RowRef::adjoint</code>\nreturns a view over the conjugate transpose of <code>self</code>\nsee <code>RowRef::adjoint</code>\nsee <code>RowRef::adjoint</code>\nsee <code>RowMut::adjoint_mut</code>\nreturns a reference over the elements as a lifetime-bound …\nreturns a reference over the elements as a lifetime-bound …\nreturns a reference over the elements as a lifetime-bound …\nsee <code>RowRef::as_col_shape</code>\nreturns the input row with the given column shape after …\nsee <code>RowRef::as_col_shape</code>\nsee <code>RowRef::as_col_shape</code>\nsee <code>RowMut::as_col_shape_mut</code>\nsee <code>RowRef::as_diagonal</code>\ninterprets the row as a diagonal matrix\nsee <code>RowRef::as_diagonal</code>\nsee <code>RowRef::as_diagonal</code>\nsee <code>RowMut::as_diagonal_mut</code>\nsee <code>RowRef::as_dyn_cols</code>\nreturns the input row with dynamic column shape\nsee <code>RowRef::as_dyn_cols</code>\nsee <code>RowRef::as_dyn_cols</code>\nsee <code>RowMut::as_dyn_cols_mut</code>\nsee <code>RowRef::as_dyn_stride</code>\nreturns the input row with dynamic stride\nsee <code>RowRef::as_dyn_stride</code>\nsee <code>RowRef::as_dyn_stride</code>\nsee <code>RowMut::as_dyn_stride_mut</code>\nsee <code>RowRef::as_mat</code>\nreturns a matrix view over <code>self</code>\nsee <code>RowRef::as_mat</code>\nsee <code>RowRef::as_mat</code>\nsee <code>RowRef::as_mat</code>\nreturns a view over <code>self</code>\nreturns a view over <code>self</code>\nreturns a pointer to the row data\nreturns a pointer to the row data\nsee <code>RowRef::as_ptr</code>\nsee <code>RowRef::as_ptr</code>\nsee <code>RowMut::as_ptr_mut</code>\nreturns a view over <code>self</code>\nreturns a view over <code>self</code>\nreturns a view over <code>self</code>\nreturns a view over <code>self</code>\nreturns a view over <code>self</code>\nreturns a reference over the elements as a slice\nreturns a reference over the elements as a slice\nreturns a reference over the elements as a slice\nsee <code>RowRef::canonical</code>\nreturns an unconjugated view over <code>self</code>\nsee <code>RowRef::canonical</code>\nsee <code>RowRef::canonical</code>\nsee <code>RowMut::canonical_mut</code>\nsee <code>RowRef::cloned</code>\nreturns a newly allocated row holding the cloned values of …\nsee <code>RowRef::cloned</code>\nreturns the column stride of the row\nreturns the column stride of the row\nsee <code>RowRef::col_stride</code>\nsee <code>RowRef::conjugate</code>\nreturns a view over the conjugate of <code>self</code>\nsee <code>RowRef::conjugate</code>\nsee <code>RowRef::conjugate</code>\nsee <code>RowMut::conjugate_mut</code>\nsee <code>RowRef::const_cast</code>\ncopies <code>other</code> into <code>self</code>\nsee <code>RowMut::copy_from</code>\nfills all the elements of <code>self</code> with <code>value</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nreturns a new row with dimension <code>nrows</code>, filled with the …\ncreates a <code>RowRef</code> from pointers to the column vector data, …\ncreates a <code>RowMut</code> from pointers to the column vector data, …\nreturns a new row with dimension <code>nrows</code>, filled with <code>value</code>\nslice <code>this</code> using <code>col</code>\nsee <code>RowRef::get</code>\nreturns a reference to the element at the given index, or …\nsee <code>RowRef::get</code>\nsee <code>RowRef::get</code>\nsee <code>RowMut::get_mut</code>\nsee <code>RowRef::get</code>\nsee <code>RowMut::get_mut_unchecked</code>\nslice <code>this</code> using <code>col</code> without bound checks\nsee <code>RowRef::get_unchecked</code>\nreturns a reference to the element at the given index, or …\nsee <code>RowRef::get_unchecked</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nsee <code>RowRef::as_col_shape</code>\nsee <code>RowRef::as_diagonal</code>\nsee <code>RowRef::transpose</code>\nsee <code>RowRef::iter</code>\nreturns an iterator over the elements of the row\nsee <code>RowRef::iter</code>\nsee <code>RowRef::iter</code>\nsee <code>RowMut::iter_mut</code>\nreturns the number of columns of the row\nreturns the number of columns of the row\nreturns the number of columns of the row\nsee <code>RowRef::norm_l1</code>\nreturns the l1 norm of <code>self</code>\nsee <code>RowRef::norm_l1</code>\nsee <code>RowRef::norm_l2</code>\nreturns the l2 norm of <code>self</code>\nsee <code>RowRef::norm_l2</code>\nsee <code>RowRef::norm_max</code>\nreturns the maximum norm of <code>self</code>\nsee <code>RowRef::norm_max</code>\nreturns the number of rows of the row (always 1)\nreturns the number of rows of the row (always 1)\nreturns the number of rows of the row (always 1)\nreturns a new row with dimension <code>nrows</code>, filled with ones\nsee <code>RowRef::par_iter</code>\nreturns a parallel iterator over the elements of the row\nsee <code>RowRef::par_iter</code>\nsee <code>RowRef::par_iter</code>\nsee <code>RowMut::par_iter_mut</code>\nsee <code>RowRef::par_partition</code>\nreturns a parallel iterator that provides exactly <code>count</code> …\nsee <code>RowRef::par_partition</code>\nreturns a raw pointer to the element at the given index\nreturns a raw pointer to the element at the given index\nsee <code>RowRef::ptr_at</code>\nsee <code>RowRef::ptr_at</code>\nsee <code>RowMut::ptr_at_mut</code>\nreturns a raw pointer to the element at the given index, …\nreturns a raw pointer to the element at the given index, …\nsee <code>RowRef::ptr_inbounds_at</code>\nsee <code>RowRef::ptr_inbounds_at</code>\nsee <code>RowMut::ptr_inbounds_at_mut</code>\nreserves the minimum capacity for <code>col_capacity</code> columns …\nresizes the row in-place so that the new dimension is …\nsee <code>RowRef::reverse_cols</code>\nreturns a view over the <code>self</code>, with the columns in reversed …\nsee <code>RowRef::reverse_cols</code>\nsee <code>RowRef::reverse_cols</code>\nsee <code>RowMut::reverse_cols_mut</code>\nreturns the number of rows and columns of the row\nreturns the number of rows and columns of the row\nsee <code>RowRef::shape</code>\nsee <code>RowRef::split_at_col</code>\nsplits the row vertically at the given column into two …\nsee <code>RowRef::split_at_col</code>\nsee <code>RowRef::split_at_col</code>\nsee <code>RowMut::split_at_col_mut</code>\nsee <code>RowRef::squared_norm_l2</code>\nreturns the squared l2 norm of <code>self</code>\nsee <code>RowRef::squared_norm_l2</code>\nsee <code>RowRef::subcols</code>\nreturns a view over the subrow starting at column <code>col_start</code>…\nsee <code>RowRef::subcols</code>\nsee <code>RowRef::subcols</code>\nsee <code>RowMut::subcols_mut</code>\nsee <code>RowRef::sum</code>\nreturns the sum of the elements of <code>self</code>\nsee <code>RowRef::sum</code>\nsee <code>RowRef::to_owned</code>\nreturns a newly allocated row holding the (possibly …\nsee <code>RowRef::to_owned</code>\nsee <code>RowRef::transpose</code>\nreturns a view over the transpose of <code>self</code>\nsee <code>RowRef::transpose</code>\nsee <code>RowRef::transpose</code>\nsee <code>RowMut::transpose_mut</code>\ntruncates the row so that its new dimensions are <code>new_ncols</code>.\nsee <code>RowRef::try_as_row_major</code>\nreturns a view over the row with a static column stride …\nsee <code>RowRef::try_as_row_major</code>\nsee <code>RowRef::try_as_row_major</code>\nsee <code>RowMut::try_as_row_major_mut</code>\nreserves the minimum capacity for <code>col_capacity</code> columns …\nreturns a new row with dimension <code>nrows</code>, filled with zeros\nthe order values should be read in, when …\nerrors that can occur during the creation of sparse …\nerrors that can occur in sparse algorithms\ngeneric error (allocation or index overflow)\nan index exceeding the maximum value (<code>I::Signed::MAX</code> for a …\nmatrix index out-of-bounds error\nmemory allocation failed\npair of indices with <code>C</code>-compatible layout\nowning sparse column major matrix\nview over sparse column major matrix\nview over sparse column major matrix\nowning sparse row major matrix\nview over sparse row major matrix\nview over sparse row major matrix\nowning symbolic structure of sparse matrix in column …\nsymbolic view structure of sparse matrix in column format, …\nowning symbolic structure of sparse matrix in row format, …\nsymbolic view structure of sparse matrix in row format, …\ntriplet of indices and value with <code>C</code>-compatible layout\nreturns a view over the adjoint of <code>self</code>\nsee <code>SparseColMatRef::adjoint</code>\nreturns a view over the adjoint of <code>self</code>\nsee <code>SparseRowMatRef::adjoint</code>\nsee <code>SparseColMatRef::adjoint</code>\nsee <code>SparseRowMatRef::adjoint</code>\nsee <code>SparseColMatRef::adjoint</code>\nsee <code>SparseRowMatRef::adjoint</code>\nsee <code>SparseColMatRef::adjoint</code>\nsee <code>SparseRowMatRef::adjoint</code>\nreturns the input matrix with dynamic shape\nreturns the input matrix with dynamic shape\nsee <code>SparseColMatRef::as_dyn</code>\nreturns the input matrix with dynamic shape\nreturns the input matrix with dynamic shape\nsee <code>SparseRowMatRef::as_dyn</code>\nsee <code>SymbolicSparseColMatRef::as_dyn</code>\nsee <code>SparseColMatRef::as_dyn</code>\nsee <code>SymbolicSparseRowMatRef::as_dyn</code>\nsee <code>SparseRowMatRef::as_dyn</code>\nsee <code>SparseColMatRef::as_dyn</code>\nsee <code>SparseRowMatRef::as_dyn</code>\nsee <code>SparseColMatRef::as_dyn</code>\nsee <code>SparseRowMatRef::as_dyn</code>\nReturns a view over the symbolic structure of <code>self</code>.\nreturns a view over <code>self</code>\nReturns a view over the symbolic structure of <code>self</code>.\nreturns a view over <code>self</code>\nReturns a view over the symbolic structure of <code>self</code>.\nsee <code>SparseColMatRef::as_ref</code>\nReturns a view over the symbolic structure of <code>self</code>.\nsee <code>SparseRowMatRef::as_ref</code>\nreturns the input matrix with the given shape after …\nreturns the input matrix with the given shape after …\nsee <code>SparseColMatRef::as_shape</code>\nreturns the input matrix with the given shape after …\nreturns the input matrix with the given shape after …\nsee <code>SparseRowMatRef::as_shape</code>\nsee <code>SymbolicSparseColMatRef::as_shape</code>\nsee <code>SparseColMatRef::as_shape</code>\nsee <code>SymbolicSparseRowMatRef::as_shape</code>\nsee <code>SparseRowMatRef::as_shape</code>\nsee <code>SparseColMatRef::as_shape</code>\nsee <code>SparseRowMatRef::as_shape</code>\nsee <code>SparseColMatRef::as_shape</code>\nsee <code>SparseRowMatRef::as_shape</code>\nreturns an unconjugated view over <code>self</code>\nsee <code>SparseColMatRef::canonical</code>\nreturns an unconjugated view over <code>self</code>\nsee <code>SparseRowMatRef::canonical</code>\nsee <code>SparseColMatRef::canonical</code>\nsee <code>SparseRowMatRef::canonical</code>\nsee <code>SparseColMatRef::canonical</code>\nsee <code>SparseRowMatRef::canonical</code>\nsee <code>SparseColMatRef::canonical</code>\nsee <code>SparseRowMatRef::canonical</code>\ncolumn index\ncolumn index\nreturns the column indices\nsee <code>SymbolicSparseRowMatRef::col_idx</code>\nreturns the column indices of row <code>i</code>\nsee <code>SymbolicSparseRowMatRef::col_idx_of_row</code>\nreturns the column indices of row <code>i</code>\nsee <code>SymbolicSparseRowMatRef::col_idx_of_row_raw</code>\nreturns the column non-zero counts\nsee <code>SymbolicSparseColMatRef::col_nnz</code>\nreturns the column pointers\nsee <code>SymbolicSparseColMatRef::col_ptr</code>\nreturns the range specifying the indices of column <code>j</code>\nsee <code>SymbolicSparseColMatRef::col_range</code>\nreturns the range specifying the indices of column <code>j</code>, …\nsee <code>SymbolicSparseColMatRef::col_range_unchecked</code>\nreturns the number of non-zero elements in the matrix\nreturns the number of non-zero elements in the matrix\nsee <code>SymbolicSparseColMatRef::compute_nnz</code>\nsee <code>SymbolicSparseRowMatRef::compute_nnz</code>\nreturns a view over the conjugate of <code>self</code>\nsee <code>SparseColMatRef::conjugate</code>\nreturns a view over the conjugate of <code>self</code>\nsee <code>SparseRowMatRef::conjugate</code>\nsee <code>SparseColMatRef::conjugate</code>\nsee <code>SparseRowMatRef::conjugate</code>\nsee <code>SparseColMatRef::conjugate</code>\nsee <code>SparseRowMatRef::conjugate</code>\nsee <code>SparseColMatRef::conjugate</code>\nsee <code>SparseRowMatRef::conjugate</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nreturns a reference to the value at the given index, or …\nreturns a reference to the value at the given index, or …\nsee <code>SparseColMatRef::get</code>\nreturns a reference to the value at the given index, or …\nsee <code>SymbolicSparseColMatRef::row_idx_of_col</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nsee <code>SparseColMatRef::adjoint</code>\nsee <code>SparseRowMatRef::adjoint</code>\nsee <code>SparseColMatRef::canonical</code>\nsee <code>SparseRowMatRef::canonical</code>\nsee <code>SparseColMatRef::conjugate</code>\nsee <code>SparseRowMatRef::conjugate</code>\nsee <code>SymbolicSparseColMatRef::as_dyn</code>\nsee <code>SparseColMatRef::as_dyn</code>\nsee <code>SymbolicSparseRowMatRef::as_dyn</code>\nsee <code>SparseRowMatRef::as_dyn</code>\nsee <code>SymbolicSparseColMatRef::parts</code>\nsee <code>SparseColMatRef::parts</code>\nsee <code>SymbolicSparseRowMatRef::parts</code>\nsee <code>SparseRowMatRef::parts</code>\nsee <code>SymbolicSparseColMatRef::as_shape</code>\nsee <code>SparseColMatRef::as_shape</code>\nsee <code>SymbolicSparseRowMatRef::as_shape</code>\nsee <code>SparseRowMatRef::as_shape</code>\nreturns the transpose of <code>self</code>\nsee <code>SparseColMatRef::transpose</code>\nsee <code>SymbolicSparseRowMatRef::transpose</code>\nsee <code>SparseRowMatRef::transpose</code>\nsparse linear algebra module. contains low level routines …\nreturns the number of columns of the matrix\nreturns the number of columns of the matrix\nreturns the number of columns of the matrix\nsee <code>SymbolicSparseRowMatRef::ncols</code>\ncreates a new sparse matrix view.\nsee <code>SparseColMatRef::new</code>\ncreates a new sparse matrix view.\nsee <code>SparseRowMatRef::new</code>\nsee <code>SparseColMatRef::new</code>\nsee <code>SparseRowMatRef::new</code>\ncreates a new pair of indices\ncreates a new pair of indices and value\ncreates a new symbolic matrix view after checking its …\ncreates a new symbolic matrix view after checking its …\ncreates a new symbolic matrix view after checking its …\nsee <code>SymbolicSparseRowMatRef::new_checked</code>\ncreate a new matrix from a previously created symbolic …\ncreate a new matrix from a previously created symbolic …\ncreates a new symbolic matrix view without checking its …\ncreates a new symbolic matrix view without checking its …\ncreates a new symbolic matrix view without checking its …\nsee <code>SymbolicSparseRowMatRef::new_unchecked</code>\ncreates a new symbolic matrix view after checking its …\ncreates a new symbolic matrix view after checking its …\ncreates a new symbolic matrix view after checking its …\nsee <code>SymbolicSparseRowMatRef::new_unsorted_checked</code>\nreturns the number of rows of the matrix\nreturns the number of rows of the matrix\nreturns the number of rows of the matrix\nsee <code>SymbolicSparseRowMatRef::nrows</code>\nsparse matrix binary and ternary operation implementations\nreturns the components of the sparse matrix\nreturns the symbolic and numeric components of the sparse …\nsee <code>SparseColMatRef::parts</code>\nreturns the components of the sparse matrix\nreturns the symbolic and numeric components of the sparse …\nsee <code>SparseRowMatRef::parts</code>\nsee <code>SymbolicSparseColMatRef::parts</code>\nsee <code>SparseColMatRef::parts</code>\nsee <code>SymbolicSparseRowMatRef::parts</code>\nsee <code>SparseRowMatRef::parts</code>\nsee <code>SparseColMatRef::parts</code>\nsee <code>SparseRowMatRef::parts</code>\nsee <code>SparseColMatRef::parts</code>\nsee <code>SparseRowMatRef::parts</code>\nrow index\nrow index\nreturns the row indices\nsee <code>SymbolicSparseColMatRef::row_idx</code>\nreturns the row indices of column <code>j</code>\nsee <code>SymbolicSparseColMatRef::row_idx_of_col</code>\nreturns the row indices of column <code>j</code>\nsee <code>SymbolicSparseColMatRef::row_idx_of_col_raw</code>\nreturns the row non-zero counts\nsee <code>SymbolicSparseRowMatRef::row_nnz</code>\nreturns the row pointers\nsee <code>SymbolicSparseRowMatRef::row_ptr</code>\nreturns the range specifying the indices of row <code>i</code>\nsee <code>SymbolicSparseRowMatRef::row_range</code>\nreturns the range specifying the indices of row <code>i</code>, without …\nsee <code>SymbolicSparseRowMatRef::row_range_unchecked</code>\nreturns the number of rows and columns of the matrix\nreturns the number of rows and columns of the matrix\nreturns the number of rows and columns of the matrix\nsee <code>SymbolicSparseRowMatRef::as_shape</code>\nreturns the $LL^\\top$ decomposition of <code>self</code>. only the …\nreturns the $LL^\\top$ decomposition of <code>self</code>. only the …\nreturns the $LL^\\top$ decomposition of <code>self</code>. only the …\nreturns the $LL^\\top$ decomposition of <code>self</code>. only the …\nreturns the $LL^\\top$ decomposition of <code>self</code>. only the …\nreturns the $LL^\\top$ decomposition of <code>self</code>. only the …\nreturns the $LU$ decomposition of <code>self</code> with partial (row) …\nreturns the $LU$ decomposition of <code>self</code> with partial (row) …\nreturns the $LU$ decomposition of <code>self</code> with partial (row) …\nreturns the $LU$ decomposition of <code>self</code> with partial (row) …\nreturns the $LU$ decomposition of <code>self</code> with partial (row) …\nreturns the $LU$ decomposition of <code>self</code> with partial (row) …\nreturns the $QR$ decomposition of <code>self</code>\nreturns the $QR$ decomposition of <code>self</code>\nreturns the $QR$ decomposition of <code>self</code>\nreturns the $QR$ decomposition of <code>self</code>\nreturns the $QR$ decomposition of <code>self</code>\nreturns the $QR$ decomposition of <code>self</code>\nassuming <code>self</code> is a lower triangular matrix, solves the …\nassuming <code>self</code> is a lower triangular matrix, solves the …\nassuming <code>self</code> is an upper triangular matrix, solves the …\nassuming <code>self</code> is an upper triangular matrix, solves the …\nassuming <code>self</code> is a lower triangular matrix, solves the …\nassuming <code>self</code> is an upper triangular matrix, solves the …\nassuming <code>self</code> is a unit lower triangular matrix, solves …\nassuming <code>self</code> is a unit lower triangular matrix, solves …\nassuming <code>self</code> is a unit lower triangular matrix, solves …\nassuming <code>self</code> is a unit lower triangular matrix, solves …\nassuming <code>self</code> is a unit lower triangular matrix, solves …\nassuming <code>self</code> is a unit lower triangular matrix, solves …\nassuming <code>self</code> is a unit upper triangular matrix, solves …\nassuming <code>self</code> is a unit upper triangular matrix, solves …\nassuming <code>self</code> is a unit upper triangular matrix, solves …\nassuming <code>self</code> is a unit upper triangular matrix, solves …\nassuming <code>self</code> is a unit upper triangular matrix, solves …\nassuming <code>self</code> is a unit upper triangular matrix, solves …\nassuming <code>self</code> is an upper triangular matrix, solves the …\nassuming <code>self</code> is an upper triangular matrix, solves the …\nassuming <code>self</code> is an upper triangular matrix, solves the …\nassuming <code>self</code> is an upper triangular matrix, solves the …\nassuming <code>self</code> is an upper triangular matrix, solves the …\nassuming <code>self</code> is an upper triangular matrix, solves the …\nreturns the symbolic component of the sparse matrix\nsee <code>SparseColMatRef::symbolic</code>\nreturns the symbolic component of the sparse matrix\nsee <code>SparseRowMatRef::symbolic</code>\nsee <code>SparseColMatRef::symbolic</code>\nsee <code>SparseRowMatRef::symbolic</code>\nreturns a newly allocated matrix holding the values of <code>self</code>…\nreturns a newly allocated matrix holding the (possibly …\nsee <code>SparseRowMatRef::to_col_major</code>\nsee <code>SymbolicSparseRowMatRef::to_col_major</code>\nsee <code>SparseRowMatRef::to_col_major</code>\nreturns a newly allocated dense matrix holding the …\nsee <code>SparseColMatRef::to_dense</code>\nreturns a newly allocated dense matrix holding the …\nsee <code>SparseRowMatRef::to_dense</code>\nsee <code>SparseColMatRef::to_dense</code>\nsee <code>SparseRowMatRef::to_dense</code>\nreturns a newly allocated matrix holding the values of <code>self</code>\nreturns a newly allocated matrix holding the values of <code>self</code>\nsee <code>SymbolicSparseColMatRef::to_owned</code>\nsee <code>SymbolicSparseRowMatRef::to_owned</code>\nreturns a newly allocated matrix holding the values of <code>self</code>…\nreturns a newly allocated matrix holding the (possibly …\nsee <code>SparseColMatRef::to_row_major</code>\nsee <code>SymbolicSparseColMatRef::to_row_major</code>\nsee <code>SparseColMatRef::to_row_major</code>\nreturns a view over the transpose of <code>self</code>\nreturns a view over the transpose of <code>self</code>\nsee <code>SparseColMatRef::transpose</code>\nreturns a view over the transpose of <code>self</code>\nreturns a view over the transpose of <code>self</code>\nsee <code>SparseRowMatRef::transpose</code>\nreturns a view over the transpose of <code>self</code>\nsee <code>SparseColMatRef::transpose</code>\nsee <code>SymbolicSparseRowMatRef::transpose</code>\nsee <code>SparseRowMatRef::transpose</code>\nsee <code>SparseColMatRef::transpose</code>\nsee <code>SparseRowMatRef::transpose</code>\nsee <code>SparseColMatRef::transpose</code>\nsee <code>SparseRowMatRef::transpose</code>\ncreate a new symbolic structure, and the corresponding …\ncreate a new symbolic structure, and the corresponding …\ncreate a new symbolic structure, and the corresponding …\ncreate a new symbolic structure, and the corresponding …\ncreate a new matrix from triplets\ncreate a new matrix from triplets\ncreate a new matrix from triplets\ncreate a new matrix from triplets\nalgorithmic primitives for sparse matrices\nreturns the numeric component of the sparse matrix\nsee <code>SparseColMatRef::val</code>\nreturns the numeric component of the sparse matrix\nsee <code>SparseRowMatRef::val</code>\nsee <code>SparseColMatRef::val</code>\nsee <code>SparseRowMatRef::val</code>\nvalue\nsee <code>SparseColMatRef::val</code>\nsee <code>SparseRowMatRef::val</code>\nsee <code>SparseColMatRef::val</code>\nsee <code>SparseRowMatRef::val</code>\nreturns a view over the values of column <code>j</code>\nsee <code>SparseColMatRef::val_of_col</code>\nsee <code>SparseColMatRef::val_of_col</code>\nsee <code>SparseColMatRef::val_of_col</code>\nsee <code>SparseColMatRef::val_of_col</code>\nreturns a view over the values of row <code>i</code>\nsee <code>SparseRowMatRef::val_of_row</code>\nsee <code>SparseRowMatRef::val_of_row</code>\nsee <code>SparseRowMatRef::val_of_row</code>\nsee <code>SparseRowMatRef::val_of_row</code>\ncolumn of the out-of-bounds index\nrow of the out-of-bounds index\ndetermine automatically which variant to select\nsimplicial factorization is always selected\nsupernodal factorization is always selected\nnon algorithmic error\nnon algorithmic error\nsparse $ll^\\top$ error\nsparse $lu$ error.\nnumerical error\nnonnegative threshold controlling when the supernodal …\nrank deficient symbolic structure\ntuning parameters for the supernodal factorizations\napproximate minimum degree ordering.\ncomputes the Cholesky decomposition (either $LL^\\top$, …\napproximate minimum degree column ordering.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ncomputes the $LU$ decomposition of a given sparse matrix. …\nsparse matrix multiplication\ncomputes the $QR$ decomposition of a given sparse matrix. …\nsupernode relaxation thresholds\nhigh-level sparse matrix solvers\nsparse matrix triangular solve\niteration at which a pivot could not be found\ntuning parameters for the amd implementation\nflop count of the ldlt and lu factorizations if the …\ndo aggressive absorption\n“dense” if degree &gt; dense * sqrt(n)\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nnumber of division\nnumber of multiplications and subtractions for the ldlt …\nnumber of multiplications and subtractions for the lu …\ncomputes the approximate minimum degree ordering for …\ncomputes the approximate minimum degree ordering for …\ncomputes the size and alignment of required workspace for …\ncomputes the size and alignment of required workspace for …\napproximate minimum degree ordering. default option\ntuning parameters for the symbolic cholesky factorization\ncustom reordering\nno reordering\nsparse intranodal bunch-kaufman factorization wrapper\nsparse $LDL^H$ factorization wrapper\nsparse $LL^H$ factorization wrapper\nsimplicial structure\nsupernodal structure\nthe symbolic structure of a sparse cholesky decomposition\nthe inner factorization used for the symbolic cholesky, …\nfill reducing ordering to use for the cholesky …\nparameters for computing the fill-reducing permutation\ncomputes a numerical intranodal bunch-kaufman …\ncomputes the required workspace size and alignment for a …\ncomputes a numerical $LDL^H$ factorization of a\ncomputes the required workspace size and alignment for a …\ncomputes a numerical llt factorization of a, or returns a …\ncomputes the required workspace size and alignment for a …\ncomputes the symbolic cholesky factorization of the matrix …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nreturns the length of the slice needed to store the …\nreturns the number of columns of the matrix\ncreates a new cholesky $LL^H$ factor from the symbolic …\ncreates new cholesky $LDL^H$ factors from the symbolic …\ncreates a new cholesky intranodal bunch-kaufman factor …\nreturns the number of rows of the matrix\nreturns the permutation that was computed during symbolic …\nreturns the inner type of the factorization, either …\nsimplicial factorization module\ncomputes the required workspace size and alignment for a …\nsolves the equation $A x = \\text{rhs}$ and stores the …\nsolves the equation $A x = \\text{rhs}$ and stores the …\nsolves the equation $A x = \\text{rhs}$ and stores the …\nsupernodal factorization module\nthreshold for selecting the supernodal factorization\nsupernodal factorization parameters\nreturns the symbolic part of the cholesky factor\nreturns the symbolic part of the cholesky factor\nreturns the symbolic part of the cholesky factor\nreference to a slice containing the cholesky factor’s …\ncholesky $LDL^H$ factors containing both the symbolic and …\ncholesky $LL^H$ factor containing both its symbolic and …\ncholesky factor structure containing its symbolic structure\nreturns the column pointers of the cholesky factor\nreturns the cholesky factor’s symbolic structure\ncomputes the numeric values of the cholesky $LDL^H$ …\nreturns the size and alignment of the workspace required …\ncomputes the row indices and  numeric values of the …\ncomputes the numeric values of the cholesky $LL^H$ factor …\nreturns the size and alignment of the workspace required …\ncomputes the row indices and  numeric values of the …\ncomputes the symbolic structure of the cholesky factor of …\ncomputes the size and alignment of the workspace required …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\ncreates an elimination tree reference from the underlying …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nreturns the raw elimination tree\ndimension of the original matrix\nreturns the length of the slice that can be used to …\nreturns the number of columns of the cholesky factor\ncreates a new cholesky $LL^H$ factor from the symbolic …\ncreates a new cholesky $LDL^H$ factor from the symbolic …\nreturns the number of rows of the cholesky factor\ncomputes the elimination tree and column counts of the …\ncomputes the size and alignment of the workspace required …\nreturns the row indices of the cholesky factor\nreturns the size and alignment of the workspace required …\nsolves the equation $A x = \\text{rhs}$ and stores the …\nsolves the equation $A x = \\text{rhs}$ and stores the …\nreturns the symbolic part of the cholesky factor\nreturns the symbolic part of the cholesky factor\nreturns the numerical values of the cholesky $LL^H$ factor\nreturns the numerical values of the cholesky $LDL^H$ factor\ncholesky bunch-kaufman factors containing both the …\ncholesky $LDL^H$ factors containing both the symbolic and …\ncholesky $LL^H$ factor containing both its symbolic and …\na single supernode from the cholesky factor\ncholesky factor structure containing its symbolic structure\nsymbolic structure of a single supernode from the cholesky …\nreturns the column pointers for row indices of each …\nreturns the column pointers for numerical values of each …\ncomputes the numeric values of the cholesky bunch-kaufman …\nreturns the size and alignment of the workspace required …\ncomputes the numeric values of the cholesky $LDL^H$ …\nreturns the size and alignment of the workspace required …\ncomputes the numeric values of the cholesky $LL^H$ factor …\nreturns the size and alignment of the workspace required …\ncomputes the supernodal symbolic structure of the cholesky …\nreturns the size and alignment of the workspace required …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nsolves the equation $L x = \\text{rhs}$ and stores the …\nsolves the equation $L^\\top x = \\text{rhs}$ and stores the …\nreturns the length of the slice that can be used to …\nreturns the number of supernodes in the cholesky factor\nreturns the number of columns of the cholesky factor\ncreates a new cholesky $LL^H$ factor from the symbolic …\ncreates new cholesky $LDL^H$ factors from the symbolic …\ncreates a new cholesky intranodal bunch-kaufman factor …\nreturns the number of rows of the cholesky factor\nreturns the pattern of the row indices in the supernode, …\nreturns the pattern of the row indices in the supernode, …\nreturns the pivoting permutation\nreturns the row indices of the cholesky factor\nsolves the system $L B L^H x = \\text{rhs}$, implicitly …\nreturns the size and alignment of the workspace required …\nsolves the equation $A x = \\text{rhs}$ and stores the …\nsolves the equation $A x = \\text{rhs}$ and stores the …\nreturns the starting index of the supernode\nreturns the starting index of the supernode\nreturns the <code>s</code>’th supernode\nreturns the <code>s</code>’th supernode\nreturns the <code>s</code>’th supernode\nreturns the symbolic structure of the <code>s</code>’th supernode\nreturns a slice of length <code>self.n_supernodes()</code> containing …\nreturns a slice of length <code>self.n_supernodes()</code> containing …\nreturns the symbolic part of the cholesky factor\nreturns the symbolic part of the cholesky factor\nreturns the symbolic part of the cholesky factor\nreturns a view over the numerical values of the supernode\nreturns the numerical values of the l factor\nreturns the numerical values of the l factor\nreturns the numerical values of the l factor\ntuning parameters for the amd implementation\ndo aggressive absorption\n“dense” if degree &gt; dense_col * sqrt(min(nrows, ncols))\n“dense” if degree &gt; dense_row * sqrt(ncols)\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\ncomputes the approximate minimum degree ordering for …\ncomputes the size and alignment of required workspace for …\nsparse $LU$ factorization wrapper\ntuning parameters for the $LU$ symbolic factorization\nstructure that contains the numerical values and row …\nsimplicial structure\nsupernodal structure\nthe symbolic structure of a sparse $LU$ decomposition\nthe inner factorization used for the symbolic $LU$, either …\nreturns the fill-reducing column permutation that was …\nreturns the fill reducing column permutation\nparameters for the fill reducing column permutation\ncomputes a numerical $LU$ factorization of $A$\ncomputes the size and alignment of the workspace required …\ncomputes the symbolic $LU$ factorization of the matrix …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nreturns the number of columns of $A$\ncreates a new $LU$ of a $0\\times 0$ matrix\ncreates $LU$ factors from their components\nreturns the number of rows of $A$\nreturns the row pivoting permutation\nsimplicial factorization module\ncomputes the size and alignment of the workspace required …\nsolves the equation $A x = \\text{rhs}$ and stores the …\ncomputes the size and alignment of the workspace required …\nsolves the equation $A^\\top x = \\text{rhs}$ and stores the …\nsupernodal factorization module\nthreshold for selecting the supernodal factorization\nsupernodal factorization parameters\nreturns the symbolic structure of the $LU$ factorization\nnumber of columns of $A$\nnumber of rows of $A$\n$LU$ factor structure containing the symbolic and …\ncomputes the numeric values of the $LU$ factors of the …\ncomputes the size and alignment of the workspace required …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nreturns the $L$ factor of the $LU$ factorization. the row …\nreturns the number of columns of $A$\ncreates a new simplicial $LU$ of a $0 \\times 0$ matrix\nreturns the number of rows of $A$\nsolves the equation $A x = \\text{rhs}$ and stores the …\nsolves the equation $A^\\top x = \\text{rhs}$ and stores the …\nreturns the $U$ factor of the $LU$ factorization. the row …\n$LU$ factor structure containing the symbolic and …\n$LU$ factor structure containing the symbolic structure\ncomputes the numeric values of the $LU$ factors of the …\ncomputes the size and alignment of the workspace required …\ncomputes the symbolic structure of the $LU$ factors of the …\ncomputes the size and alignment of the workspace required …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nreturns the number of supernodes\nreturns the number of columns of $A$\ncreates a new supernodal $LU$ of a $0 \\times 0$ matrix\nreturns the number of rows of $A$\nsolves the equation $A x = \\text{rhs}$ and stores the …\nsolves the equation $A^\\top x = \\text{rhs}$ and stores the …\ninfo about the matrix multiplication operation to help …\nmultiplies a dense matrix <code>lhs</code> by a sparse matrix <code>rhs</code>, and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nmultiplies a sparse matrix <code>lhs</code> by a dense matrix <code>rhs</code>, and …\nperforms a numeric matrix multiplication of a sparse …\nperforms a numeric matrix multiplication of a sparse …\ncomputes the size and alignment of the workspace required …\nperforms a symbolic matrix multiplication of a sparse …\nsparse $QR$ factorization wrapper\ntuning parameters for the $QR$ symbolic factorization\nsimplicial structure\nsupernodal structure\nthe symbolic structure of a sparse $QR$ decomposition\nthe inner factorization used for the symbolic $QR$, either …\ncomputes the column elimination tree of $A$, which is the …\ncomputes the size and alignment of the workspace required …\nreturns the fill-reducing column permutation that was …\nparameters for the fill reducing column permutation\ncomputes the size and alignment of the workspace required …\ncomputes the column counts of the cholesky factor of …\ncomputes a numerical $QR$ factorization of $A$\ncomputes the required workspace size and alignment for a …\ncomputes the symbolic $QR$ factorization of the matrix …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nreturns the length of the slice needed to store the …\nreturns the length of the slice needed to store the …\nnumber of columns of $A$\ncreates a $QR$ decomposition reference from its symbolic …\nnumber of rows of $A$\ncomputes a postordering of the elimination tree of size <code>n</code>\ncomputes the size and alignment of the workspace required …\nsimplicial factorization module\nreturns the size and alignment of the workspace required …\nsolves the equation $A x = \\text{rhs}$ in the sense of …\nsupernodal factorization module\nthreshold for selecting the supernodal factorization\nsupernodal factorization parameters\nreturns the symbolic structure of the $QR$ factorization.\nreturns the factor $R$\nreturns the numerical values of the factor $R$ of the $QR$ …\n$QR$ factors containing both the symbolic and numeric …\nsymbolic structure of the $QR$ decomposition\ncomputes the size and alignment of the workspace required …\ncomputes the numerical $QR$ factorization of $A$.\ncomputes the symbolic $QR$ factorization of a matrix $A$, …\ncomputes the size and alignment of the workspace required …\nReturns the argument unchanged.\nReturns the argument unchanged.\nreturns the householder coefficients $H$ in the columns of …\nreturns the numerical values of the householder factors of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nreturns the length of the slice that can be used to …\nreturns the length of the slice that can be used to …\nreturns the number of columns of the matrix $A$\ncreates $QR$ factors from their components\nreturns the number of rows of the matrix $A$\nsolves the equation $A x = \\text{rhs}$ in the sense of …\nreturns the symbolic structure of the $QR$ factorization.\nreturns the numerical values of the $t$ factors of the …\nreturns the symbolic structure of $R^H$\nreturns the numerical values of the factor $R$ of the $QR$ …\n$QR$ factors containing both the symbolic and numeric …\nsymbolic structure of the householder reflections that …\nsymbolic structure of the $QR$ decomposition,\nreturns the column pointers for the row indices of the …\nreturns the column pointers for the numerical values of …\nreturns the column pointers for the numerical values of …\ncomputes the numerical $QR$ factorization of $A$\ncomputes the size and alignment of the workspace required …\ncomputes the symbolic $QR$ factorization of a matrix $A$, …\ncomputes the size and alignment of the workspace required …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nreturns the symbolic structure of the householder and $t$ …\nreturns the numerical values of the householder factors of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nreturns the length of the slice that can be used to …\nreturns the length of the slice that can be used to …\nreturns the length of the slice that can be used to …\nreturns the number of supernodes in the symbolic $QR$\ncreates $QR$ factors from their components\nreturns the number of rows of the householder factors\ncomputes the size and alignment of the workspace required …\nsolves the equation $A x = \\text{rhs}$ in the sense of …\nreturns the symbolic structure of the $QR$ factorization\nreturns the numerical values of the $t$ factors of the …\nsparse $LL^\\top$ factorization\nsparse $QR$ factorization\nsparse $QR$ factorization\nreference-counted sparse symbolic $LL^\\top$ factorization\nreference-counted sparse symbolic $LU$ factorization\nreference-counted sparse symbolic $QR$ factorization\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nreturns the symbolic $LL^\\top$ factorization of the input …\nreturns the symbolic $QR$ factorization of the input matrix\nreturns the symbolic $LU$ factorization of the input matrix\nreturns the $LL^\\top$ factorization of the input matrix …\nreturns the $QR$ factorization of the input matrix with …\nreturns the $LU$ factorization of the input matrix with …\nassuming <code>tril</code> is a lower triangular matrix, solves the …\nassuming <code>tril</code> is a lower triangular matrix, solves the …\nassuming <code>tril</code> is a lower triangular matrix, solves the …\nassuming <code>tril</code> is a lower triangular matrix, solves the …\nassuming <code>triu</code> is an upper triangular matrix, solves the …\nassuming <code>triu</code> is an upper triangular matrix, solves the …\nassuming <code>triu</code> is an upper triangular matrix, solves the …\nassuming <code>triu</code> is an upper triangular matrix, solves the …\nreturns the sum of <code>lhs</code> and <code>rhs</code>.\ncomputes the sum of <code>dst</code> and <code>src</code> and stores the result in …\ncomputes the sum of <code>lhs</code> and <code>rhs</code>, storing the result in <code>dst</code> …\nreturns the resulting matrix obtained by applying <code>f</code> to the …\nreturns the resulting matrix obtained by applying <code>f</code> to the …\nreturns the difference of <code>lhs</code> and <code>rhs</code>.\ncomputes the difference of <code>dst</code> and <code>src</code> and stores the …\ncomputes the difference of <code>lhs</code> and <code>rhs</code>, storing the result …\nreturns the resulting matrix obtained by applying <code>f</code> to the …\nreturns the sparsity pattern containing the union of those …\ncomputes the adjoint of the matrix $A$ and returns a view …\ncomputes the self-adjoint permutation $P A P^\\top$ of the …\ncomputes the workspace size and alignment required to …\ncomputes the self-adjoint permutation $P A P^\\top$ of the …\ncomputes the workspace size and alignment required to …\ncomputes the self-adjoint permutation $P A P^\\top$ of the …\nsorts and deduplicates <code>row_indices</code> and <code>values</code> …\nsorts <code>row_indices</code> and <code>values</code> simultaneously so that …\ncomputes the transpose of the matrix $A$ and returns a …\ncomputes the transpose of the matrix $A$ and returns a …\ncomputes the workspace size and alignment required to …\ncomputes the workspace size and alignment required to …\nNaNs are skipped, and they’re not included in the total …\nSpecifies how missing values should be handled in mean and …\nNaNs are passed as-is to arithmetic operators.\ncomputes the mean of the columns of <code>mat</code> and stores the …\ncomputes the variance of the columns of <code>mat</code> and stores the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ncomputes the mean of the rows of <code>mat</code> and stores the result …\ncomputes the variance of the rows of <code>mat</code> and stores the …\nA generic random value distribution for complex numbers.\nA marker trait used to indicate that an <code>RngCore</code> or …\nTypes (distributions) that can be used to create a random …\nThe element type.\nExtension trait on iterators, providing random sampling …\nAn automatically-implemented extension trait on <code>RngCore</code> …\nThe core of a random number generator.\nSeed type, which is restricted to types …\nA random number generator that can be explicitly seeded.\nExtension trait on slices, providing random mutation and …\nA generic random value distribution, implemented for many …\nSamples floating-point numbers according to the normal …\nThe standard RNG. The PRNG algorithm in <code>StdRng</code> is chosen …\nA reference to the thread-local generator\nReturns a reference to one random element of the slice, or …\nChoose one element at random from the iterator.\nChooses <code>amount</code> elements from the slice at random, without …\nCollects <code>amount</code> values at random from the iterator into a …\nCollects values at random from the iterator into a …\nSimilar to <code>choose_multiple</code>, but where the likelihood of …\nReturns a mutable reference to one random element of the …\nChoose one element at random from the iterator.\nSimilar to <code>choose</code>, but where the likelihood of each …\nSimilar to <code>choose_mut</code>, but where the likelihood of each …\nFill any type implementing <code>Fill</code> with random data\nFill <code>dest</code> with random data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new instance of the RNG seeded via <code>getrandom</code>.\nCreate a new PRNG seeded from another <code>Rng</code>.\nCreate a new PRNG using the given seed.\nReturn a random value supporting the <code>Standard</code> distribution.\nReturn a bool with a probability <code>p</code> of being true.\nGenerate a random value in the given range.\nReturn a bool with a probability of <code>numerator/denominator</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a distribution of values of ‘S’ by mapping the …\nCreates a complex distribution from independent …\nReturn the next random <code>u32</code>.\nReturn the next random <code>u64</code>.\nShuffle a slice in place, but exit early.\nGenerates a random value using the thread-local random …\nGenerate a random value of <code>T</code>, using <code>rng</code> as the source of …\nSample a new value, using the given distribution.\nCreate an iterator that generates random values of <code>T</code>, …\nCreate an iterator that generates values using the given …\nCreate a new PRNG using a <code>u64</code> seed.\nShuffle a mutable slice in place.\nRetrieve the lazily-initialized thread-local random number …\nFill any type implementing <code>Fill</code> with random data\nFill <code>dest</code> entirely with random data.\napproximate comparators for testing purposes\ncompile-time bound-checked indexing types\nsimd helper utilities based on lifetime-bound indices\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\narray of length equal to the value tied to <code>&#39;n</code>.\nlifetime branded length\nlifetime branded index.\nlifetime branded partition index.\nindex equal to zero ro one\n<code>i</code> value smaller than the size corresponding to the …\nindex equal to zero ro one, or a sentinel value\ndimension equal to one\nsplits a range into two segments.\nzero index\nindex equal to zero\nreturns <code>start</code> advanced by <code>len</code> units, saturated to <code>self</code>\nreturns the unconstrained slice.\nreturns the unconstrained slice.\nconvert a constrained slice to an unconstrained one.\ncheck that the index is bounded by <code>self</code>, or panic …\nreturns the index, bounded inclusively by the value tied …\nreturns the midpoint of the partition.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nreturns an index value.\nreturns a constrained array after checking that its length …\nreturns a constrained array after checking that its length …\nassert that the values of <code>slice</code> are all bounded by <code>size</code>.\nassert that the values of <code>slice</code> are all bounded by <code>size</code>.\nassume that the values of <code>slice</code> are all bounded by the …\nassume that the values of <code>slice</code> are all bounded by the …\nassert that the values of <code>slice</code> are all bounded by <code>size</code>.\nassert that the values of <code>slice</code> are all bounded by <code>size</code>.\nassume that the values of <code>slice</code> are all bounded by the …\nassume that the values of <code>slice</code> are all bounded by the …\nsize of the first half.\npartitions <code>self</code> into two segments.\ncheck that the index is bounded by <code>self</code>, or panic …\nreturns the index if available, or <code>none</code> otherwise.\ncheck that the index is bounded by <code>self</code>, or panic …\nreturns an iterator over the indices between <code>0</code> and <code>self</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nreturns the length of <code>self</code>.\nreturns the midpoint of the partition.\ncreate new branded value with a unique brand.\ncreate new branded value with the same brand as <code>Dim</code>.\ncreate new branded value with the same brand as <code>Dim</code>.\nreturns a constrained index value if <code>idx</code> is nonnegative, …\ncreate new branded value with an arbitrary brand.\ncreate new branded value with an arbitrary brand.\ncreate new branded value with an arbitrary brand.\nreturns a constrained index value if <code>idx</code> is nonnegative, …\ncreate new branded value with the same brand as <code>Dim</code>.\ncreate new branded value with the same brand as <code>Dim</code>.\nreturns a constrained index value if <code>idx</code> is nonnegative, …\nreturns the next index, bounded inclusively by the value …\nreturns a <code>none</code> value.\nreturns an iterator over the indices between <code>0</code> and <code>self</code>.\npartitions <code>self</code> into two segments as specifiedd by the …\nreturns an iterator over the indices between <code>self</code> and <code>to</code>.\nsign extend the value.\nsize of the second half.\nreturns an iterator over the indices between <code>self</code> and <code>to</code>.\nreturns the index, bounded inclusively by the value tied …\ntruncate <code>self</code> to a smaller type <code>i</code>.\ncheck that the index is bounded by <code>self</code>, or return <code>none</code> …\nreturns the unconstrained value.\nreturns the unconstrained value.\nreturns the unconstrained value.\nreturns the inner value.\ncreate new branded value with the value <code>dim</code>.\nzero-extends the internal value into a <code>usize</code>.\nzero-extends the internal value into a <code>usize</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")